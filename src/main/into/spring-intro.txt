Spring Initializer

Allows creating Spring Boot applications and provides necessary libraries.
Spring Boot Starter

A group of libraries catering to development needs.
Example: Spring Web Starter for REST APIs.
Spring Container

A lightweight core of the Spring Framework managing Java objects (beans).
Provides dependency injection (DI) and inversion of control (IoC).
Simplifies configuration and lifecycle management of application components.
Dependency Injection (DI)

Mechanism where Spring manages and injects dependencies into beans.
Promotes loose coupling, easier testing, and enhanced flexibility.
Inversion of Control (IoC)

Delegates object creation and lifecycle management to a framework (e.g., Spring).
IoC is implemented through DI to decouple components and simplify configuration.
Analogy for IoC and DI:

IoC: Delegating car assembly to a manufacturer (Spring Framework).
DI: Specifying components (engine) you need, which are provided by Spring.
IoC simplifies assembly; DI integrates components seamlessly.
Spring Bean

A Java object managed by the Spring IoC container.
Instantiated, configured, and injected with dependencies by the IoC container.
Immutable Design Pattern

Uses constructor injection to create immutable objects.
Object state is initialized once and cannot change thereafter.
Key Points:

Thread Safety: Ensures safety in concurrent environments.
Predictable Behavior: Promotes consistent state and clearer logic.
Testability: Simplifies unit tests with fixed object states.
Dependency Management: Declares dependencies during object creation.
Comparison:

Setter Injection: Allows state changes, unlike constructor injection.
@Autowired: Constructor injection offers clearer dependency visibility.
Automatic Bean Detection

Done via component scanning through annotations or XML.
Annotations:

Detects @Component, @Repository, @Service, @Controller, etc.
Specialized annotations like @Configuration and @RestController are included.
XML Configuration:

Example: <context:component-scan base-package="org.example.repository.database"/>
Recommended to scan packages individually for clarity:
<context:component-scan base-package="org.example.controller.web"/>
<context:component-scan base-package="org.example.service.prefix"/>
@Configuration Annotation

Declares a class as a source of bean definitions.
Works with @Bean methods to define and configure Spring beans.
Commonly paired with @ComponentScan or <context:component-scan> for detection.
Difference from @Component:

@Configuration: Defines beans and their configurations explicitly.
@Component: Marks a class as a Spring-managed component.



