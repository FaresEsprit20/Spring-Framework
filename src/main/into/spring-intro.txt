Spring Initializer:
  - Allows to create spring boot applications and provides all the necessary libraries.

Spring Boot Starter:
  - Are a group of libraries that responds to the development needs .for example for rest api we have spring web starter etc ...

Spring Container:
  - A Spring lightweight container refers to the core of the Spring Framework that manages the lifecycle of Java objects (beans).
   It provides dependency injection and inversion of control capabilities, allowing for easier configuration and management of application components.


Dependency Injection (DI) :
  - in the context of Spring Framework refers to the mechanism where Spring manages and injects dependencies into beans.
   It allows for loose coupling, promotes easier testing, and enhances flexibility by externalizing object dependencies from the code itself.

Inversion of Control (IoC):
  - is a programming principle where control over object creation and lifecycle management is delegated to a framework like Spring. In Spring,
   IoC is implemented through Dependency Injection (DI), which decouples components, simplifies configuration, and enhances flexibility in application development.

   Example:

   Imagine you're building a car (your application). Traditionally, you would design and assemble every component of the car yourself, including the engine, transmission, and electronics. This is like tightly coupling all parts together, making it hard to replace or modify one part without affecting others.

   Now, apply IoC and DI:

   Inversion of Control (IoC): Instead of building each component yourself, you decide to delegate the assembly and integration of critical components to a specialized manufacturer (Spring Framework). This manufacturer knows how to build, configure, and integrate each part of the car (beans).

   Dependency Injection (DI): When the time comes to integrate a new engine into your car, you specify what type of engine you need (dependency) and the manufacturer (Spring) provides it, ensuring it fits seamlessly into the car (application) without you having to handle all the details yourself.

   In this analogy:

   IoC is like delegating the control of assembly and integration to a specialized manufacturer (Spring).
   DI is like specifying what components (dependencies) your car (application) needs, and having them provided and integrated for you by the manufacturer (Spring).

 Bean:
     - In the context of the Spring Framework, a Spring Bean is an object that is managed by the Spring IoC (Inversion of Control) container.
       It is a Java object that is instantiated, configured, and managed by the Spring IoC container, which applies Dependency Injection (DI)
       to inject dependencies and manage the bean's lifecycle.

 Immutable Design Pattern:
     - The immutable design pattern in Spring utilizes constructor injection to create objects whose state is initialized upon instantiation and remains unchanged thereafter. For example, a User object is constructed with parameters like username, email, and role, ensuring these values are immutable for consistency and thread safety.

    Key Points:

   - Thread Safety: Constructor injection sets object state once, making it inherently thread-safe, crucial for concurrent environments.
   - Predictable Behavior: Immutable objects via constructor injection promote clearer application logic by maintaining consistent state.
   - Testability: Immutable objects simplify testing as their state remains fixed, facilitating reliable unit tests.
   - Dependency Management: Constructor injection explicitly declares dependencies at creation, enhancing clarity and reducing accidental state changes.

     Comparison:
   - Setter Injection: Unlike setter injection, constructor injection enforces immutability by initializing state once, improving code reliability.
   - @Autowired Annotation: Constructor injection provides clearer dependency visibility and control, aligning with best practices and minimizing unintended state modifications.

  In summary, constructor injection is preferred in Spring for creating immutable objects due to its benefits in thread safety,
   predictable behavior, testability, and dependency management.


 Détection automatique des beans:

  Cette opération ce fait grace a Component scan par 2 methodes soit par les annoations ou par xml :
 Spring automatically detects classes annotated with @Component and its specialized stereotypes (@Repository, @Service, @Controller, etc.),
 as well as other Spring-specific annotations (@Configuration, @RestController, etc.).
   Also in xml for example <context:component-scan base-package="org.example.repository.database"/>
   For the xml method it is never recommended to scan the base package but to scan every package alone:
  <context:component-scan base-package="org.example.controller.web"/>
  <context:component-scan base-package="org.example.service.prefix"/>
  <context:component-scan base-package="org.example.repository.database"/>



